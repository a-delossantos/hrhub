datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Supplier {
  id       Int        @id @default(autoincrement())
  name     String
  contact  String?
  address  String?
  Material Material[]
}

model Material {
  id              Int               @id @default(autoincrement())
  name            String
  category        String
  material_id     String            @unique
  projectMaterial ProjectMaterial[]
  supplier        Supplier          @relation(fields: [supplierId], references: [id])
  supplierId      Int
}

model Project {
  id              Int               @id @default(autoincrement())
  address         String
  alias           String?
  owner_name      String?
  projectMaterial ProjectMaterial[]
  startDate       DateTime?
}

model ProjectMaterial {
  id         Int      @id @default(autoincrement())
  material   Material @relation(fields: [materialId], references: [id])
  price      Int
  project    Project  @relation(fields: [projectId], references: [id])
  materialId Int
  projectId  Int
  date       DateTime @default(now())
}
